# HealthyWallet Achievement System - API Endpoints

Base URL: http://localhost:5000/api/achievements
All endpoints require authentication (Bearer token)

================================================================================
## 1. GET /api/achievements - Get All Achievements (Unlocked & Locked)
================================================================================

### Description:
Retrieve all 10 achievement levels with their unlock status, progress, and details.

### cURL Command:
```bash
curl -X GET http://localhost:5000/api/achievements \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -H "Content-Type: application/json"
```

### Response Example:
```json
{
  "success": true,
  "data": {
    "achievements": [
      {
        "id": 1,
        "name": "First Goal Achiever",
        "description": "Complete your first financial goal within the deadline",
        "category": "goals",
        "icon": "üéØ",
        "criteria": "Complete 1 goal on time",
        "points": 100,
        "unlocked": true,
        "earnedAt": "2024-01-15T10:30:00.000Z",
        "progress": 100
      },
      {
        "id": 2,
        "name": "Savings Improver",
        "description": "Save more than your average of the past two months",
        "category": "savings",
        "icon": "üìà",
        "criteria": "Monthly savings > 2-month average",
        "points": 150,
        "unlocked": false,
        "earnedAt": null,
        "progress": 0
      },
      {
        "id": 3,
        "name": "Consistent Tracker",
        "description": "Add income or expense entries for 7 consecutive days",
        "category": "consistency",
        "icon": "üìä",
        "criteria": "7 consecutive days of entries",
        "points": 200,
        "unlocked": false,
        "earnedAt": null,
        "progress": 0
      },
      {
        "id": 4,
        "name": "Budget Master",
        "description": "Keep expenses under 80% of income for a full month",
        "category": "savings",
        "icon": "üí∞",
        "criteria": "Monthly expense ratio < 80%",
        "points": 250,
        "unlocked": false,
        "earnedAt": null,
        "progress": 0
      },
      {
        "id": 5,
        "name": "Goal Setter",
        "description": "Create and actively work on 3 different goals simultaneously",
        "category": "goals",
        "icon": "üéØ",
        "criteria": "3 active goals with contributions",
        "points": 300,
        "unlocked": false,
        "earnedAt": null,
        "progress": 0
      },
      {
        "id": 6,
        "name": "Emergency Fund Builder",
        "description": "Build an emergency fund worth 3 months of expenses",
        "category": "milestones",
        "icon": "üõ°Ô∏è",
        "criteria": "Emergency fund ‚â• 3x monthly expenses",
        "points": 400,
        "unlocked": false,
        "earnedAt": null,
        "progress": 0
      },
      {
        "id": 7,
        "name": "Savings Champion",
        "description": "Maintain a savings rate of 20% or higher for 3 consecutive months",
        "category": "savings",
        "icon": "üèÜ",
        "criteria": "20%+ savings rate for 3 months",
        "points": 500,
        "unlocked": false,
        "earnedAt": null,
        "progress": 0
      },
      {
        "id": 8,
        "name": "Goal Completionist",
        "description": "Successfully complete 5 financial goals",
        "category": "goals",
        "icon": "‚≠ê",
        "criteria": "Complete 5 goals total",
        "points": 600,
        "unlocked": false,
        "earnedAt": null,
        "progress": 0
      },
      {
        "id": 9,
        "name": "Financial Discipline Master",
        "description": "Track expenses daily for 30 consecutive days",
        "category": "consistency",
        "icon": "üìù",
        "criteria": "30 consecutive days of expense tracking",
        "points": 750,
        "unlocked": false,
        "earnedAt": null,
        "progress": 0
      },
      {
        "id": 10,
        "name": "Wealth Builder Legend",
        "description": "Achieve a net worth growth of 50% from your starting point",
        "category": "milestones",
        "icon": "üëë",
        "criteria": "50% net worth growth",
        "points": 1000,
        "unlocked": false,
        "earnedAt": null,
        "progress": 0
      }
    ],
    "stats": {
      "totalAchievements": 10,
      "unlockedCount": 1,
      "totalPoints": 100,
      "completionPercentage": 10
    }
  }
}
```

================================================================================
## 2. POST /api/achievements/check - Check and Unlock New Achievements
================================================================================

### Description:
Manually trigger achievement checking to unlock any new achievements the user qualifies for.

### cURL Command:
```bash
curl -X POST http://localhost:5000/api/achievements/check \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -H "Content-Type: application/json"
```

### Response Example (New Achievements Unlocked):
```json
{
  "success": true,
  "data": {
    "newAchievements": [
      {
        "id": 2,
        "name": "Savings Improver",
        "description": "Save more than your average of the past two months",
        "category": "savings",
        "icon": "üìà",
        "criteria": "Monthly savings > 2-month average",
        "points": 150,
        "earnedAt": "2024-01-20T14:25:00.000Z"
      },
      {
        "id": 3,
        "name": "Consistent Tracker",
        "description": "Add income or expense entries for 7 consecutive days",
        "category": "consistency",
        "icon": "üìä",
        "criteria": "7 consecutive days of entries",
        "points": 200,
        "earnedAt": "2024-01-20T14:25:00.000Z"
      }
    ],
    "totalAchievements": 3,
    "totalPoints": 450,
    "message": "Congratulations! You unlocked 2 new achievements!"
  }
}
```

### Response Example (No New Achievements):
```json
{
  "success": true,
  "data": {
    "newAchievements": [],
    "totalAchievements": 3,
    "totalPoints": 450,
    "message": "No new achievements unlocked"
  }
}
```

================================================================================
## 3. GET /api/achievements/leaderboard - Get Achievement Leaderboard
================================================================================

### Description:
Get a ranked list of users based on their achievement points and count.

### cURL Command:
```bash
curl -X GET "http://localhost:5000/api/achievements/leaderboard?limit=10" \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -H "Content-Type: application/json"
```

### Query Parameters:
- `limit` (optional): Number of top users to return (default: 10)

### Response Example:
```json
{
  "success": true,
  "data": {
    "leaderboard": [
      {
        "_id": "60f7b3b3b3b3b3b3b3b3b3b3",
        "name": "John Doe",
        "achievementCount": 7,
        "totalPoints": 2100,
        "lastAchievement": {
          "achievementId": 8,
          "name": "Goal Completionist",
          "description": "Successfully complete 5 financial goals",
          "category": "goals",
          "icon": "‚≠ê",
          "points": 600,
          "earnedAt": "2024-01-18T16:45:00.000Z"
        }
      },
      {
        "_id": "60f7b3b3b3b3b3b3b3b3b3b4",
        "name": "Jane Smith",
        "achievementCount": 5,
        "totalPoints": 1350,
        "lastAchievement": {
          "achievementId": 6,
          "name": "Emergency Fund Builder",
          "description": "Build an emergency fund worth 3 months of expenses",
          "category": "milestones",
          "icon": "üõ°Ô∏è",
          "points": 400,
          "earnedAt": "2024-01-17T11:20:00.000Z"
        }
      },
      {
        "_id": "60f7b3b3b3b3b3b3b3b3b3b5",
        "name": "Mike Johnson",
        "achievementCount": 4,
        "totalPoints": 1000,
        "lastAchievement": {
          "achievementId": 5,
          "name": "Goal Setter",
          "description": "Create and actively work on 3 different goals simultaneously",
          "category": "goals",
          "icon": "üéØ",
          "points": 300,
          "earnedAt": "2024-01-16T09:15:00.000Z"
        }
      }
    ],
    "totalUsers": 3
  }
}
```

================================================================================
## 4. GET /api/users/achievements - Get User's Unlocked Achievements Only
================================================================================

### Description:
Get only the achievements that the current user has unlocked (legacy endpoint from user controller).

### cURL Command:
```bash
curl -X GET http://localhost:5000/api/users/achievements \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -H "Content-Type: application/json"
```

### Response Example:
```json
{
  "success": true,
  "data": {
    "achievements": [
      {
        "achievementId": 1,
        "name": "First Goal Achiever",
        "description": "Complete your first financial goal within the deadline",
        "category": "goals",
        "icon": "üéØ",
        "points": 100,
        "earnedAt": "2024-01-15T10:30:00.000Z"
      },
      {
        "achievementId": 2,
        "name": "Savings Improver",
        "description": "Save more than your average of the past two months",
        "category": "savings",
        "icon": "üìà",
        "points": 150,
        "earnedAt": "2024-01-20T14:25:00.000Z"
      }
    ]
  }
}
```

================================================================================
## Achievement Categories
================================================================================

1. **goals** - Goal-related achievements
   - First Goal Achiever (Level 1)
   - Goal Setter (Level 5)
   - Goal Completionist (Level 8)

2. **savings** - Savings and budget achievements
   - Savings Improver (Level 2)
   - Budget Master (Level 4)
   - Savings Champion (Level 7)

3. **consistency** - Tracking consistency achievements
   - Consistent Tracker (Level 3)
   - Financial Discipline Master (Level 9)

4. **milestones** - Major financial milestones
   - Emergency Fund Builder (Level 6)
   - Wealth Builder Legend (Level 10)

================================================================================
## Achievement Points System
================================================================================

Level 1:  100 points
Level 2:  150 points
Level 3:  200 points
Level 4:  250 points
Level 5:  300 points
Level 6:  400 points
Level 7:  500 points
Level 8:  600 points
Level 9:  750 points
Level 10: 1000 points

Total Possible Points: 4,150 points

================================================================================
## Automatic Achievement Triggers
================================================================================

Achievements are automatically checked when users perform these actions:

1. **POST /api/income** - Create income entry
   ‚Üí Triggers: Consistent Tracker, Savings Improver, Budget Master, Savings Champion

2. **POST /api/expenses** - Create expense entry
   ‚Üí Triggers: Consistent Tracker, Budget Master, Financial Discipline Master

3. **POST /api/goals/:id/contribute** - Add goal contribution
   ‚Üí Triggers: First Goal Achiever, Goal Setter, Goal Completionist

4. **PUT /api/goals/:id** - Update goal (when completed)
   ‚Üí Triggers: First Goal Achiever, Goal Completionist

5. **Manual Check** - POST /api/achievements/check
   ‚Üí Checks all achievement criteria

================================================================================
## Error Responses
================================================================================

### 401 Unauthorized:
```json
{
  "success": false,
  "message": "Not authorized, no token"
}
```

### 404 Not Found (if endpoint doesn't exist):
```json
{
  "success": false,
  "message": "Route not found"
}
```

### 500 Internal Server Error:
```json
{
  "success": false,
  "message": "Server error occurred",
  "details": "Error details (development only)"
}
```

================================================================================
## Usage Examples
================================================================================

### Complete Achievement Flow:

1. **Check current achievements:**
   ```bash
   curl -X GET http://localhost:5000/api/achievements \
     -H "Authorization: Bearer YOUR_TOKEN"
   ```

2. **Perform actions (create income, expenses, goals)**

3. **Check for new achievements:**
   ```bash
   curl -X POST http://localhost:5000/api/achievements/check \
     -H "Authorization: Bearer YOUR_TOKEN"
   ```

4. **View leaderboard:**
   ```bash
   curl -X GET http://localhost:5000/api/achievements/leaderboard \
     -H "Authorization: Bearer YOUR_TOKEN"
   ```

### Integration Tips:

- Call `/achievements/check` after major user actions
- Use `/achievements` to show progress in UI
- Use `/achievements/leaderboard` for gamification features
- Achievement checks are non-blocking and won't affect main operations

================================================================================
## Frontend Integration
================================================================================

### Achievement Progress Display:
```javascript
// Get all achievements with progress
const response = await fetch('/api/achievements', {
  headers: { 'Authorization': `Bearer ${token}` }
});
const { achievements, stats } = response.data;

// Display progress: stats.completionPercentage
// Show unlocked count: stats.unlockedCount
// Total points earned: stats.totalPoints
```

### Achievement Notification:
```javascript
// Check for new achievements after user action
const checkResponse = await fetch('/api/achievements/check', {
  method: 'POST',
  headers: { 'Authorization': `Bearer ${token}` }
});
const { newAchievements, message } = checkResponse.data;

// Show notification if newAchievements.length > 0
if (newAchievements.length > 0) {
  showNotification(message, newAchievements);
}
```

### Leaderboard Component:
```javascript
// Get leaderboard data
const leaderboardResponse = await fetch('/api/achievements/leaderboard?limit=10', {
  headers: { 'Authorization': `Bearer ${token}` }
});
const { leaderboard } = leaderboardResponse.data;

// Display ranked list of users with points and achievements
```

================================================================================

Total Endpoints: 4
Authentication: Required for all endpoints
Rate Limiting: Standard API rate limits apply
Caching: Achievement data can be cached on frontend for better UX
