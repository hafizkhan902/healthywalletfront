login with credential: email: 'hkkhan074@gmail.com' . password: '@Gmail.com920' on 2000 port and then do curls

================================================================================
## 1. GET /api/achievements - Get All Achievements (Unlocked & Locked)
================================================================================

### cURL Command:
```bash
curl -X GET http://localhost:2000/api/achievements \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -H "Content-Type: application/json"
```

### Expected Response:
```json
{
  "success": true,
  "data": {
    "achievements": [
      {
        "id": 1,
        "name": "First Goal Achiever",
        "description": "Complete your first financial goal within the deadline",
        "category": "goals",
        "icon": "üéØ",
        "criteria": "Complete 1 goal on time",
        "points": 100,
        "unlocked": true,
        "earnedAt": "2024-01-15T10:30:00.000Z",
        "progress": 100
      },
      {
        "id": 2,
        "name": "Savings Improver",
        "description": "Save more than your average of the past two months",
        "category": "savings",
        "icon": "üìà",
        "criteria": "Monthly savings > 2-month average",
        "points": 150,
        "unlocked": false,
        "earnedAt": null,
        "progress": 65
      },
      {
        "id": 3,
        "name": "Consistent Tracker",
        "description": "Add income or expense entries for 7 consecutive days",
        "category": "consistency",
        "icon": "üìä",
        "criteria": "7 consecutive days of entries",
        "points": 200,
        "unlocked": false,
        "earnedAt": null,
        "progress": 40
      },
      {
        "id": 4,
        "name": "Budget Master",
        "description": "Keep expenses under 80% of income for a full month",
        "category": "savings",
        "icon": "üí∞",
        "criteria": "Monthly expense ratio < 80%",
        "points": 250,
        "unlocked": false,
        "earnedAt": null,
        "progress": 20
      },
      {
        "id": 5,
        "name": "Goal Setter",
        "description": "Create and actively work on 3 different goals simultaneously",
        "category": "goals",
        "icon": "üéØ",
        "criteria": "3 active goals with contributions",
        "points": 300,
        "unlocked": false,
        "earnedAt": null,
        "progress": 33
      },
      {
        "id": 6,
        "name": "Emergency Fund Builder",
        "description": "Build an emergency fund worth 3 months of expenses",
        "category": "milestones",
        "icon": "üõ°Ô∏è",
        "criteria": "Emergency fund ‚â• 3x monthly expenses",
        "points": 400,
        "unlocked": false,
        "earnedAt": null,
        "progress": 10
      },
      {
        "id": 7,
        "name": "Savings Champion",
        "description": "Maintain a savings rate of 20% or higher for 3 consecutive months",
        "category": "savings",
        "icon": "üèÜ",
        "criteria": "20%+ savings rate for 3 months",
        "points": 500,
        "unlocked": false,
        "earnedAt": null,
        "progress": 0
      },
      {
        "id": 8,
        "name": "Goal Completionist",
        "description": "Successfully complete 5 financial goals",
        "category": "goals",
        "icon": "‚≠ê",
        "criteria": "Complete 5 goals total",
        "points": 600,
        "unlocked": false,
        "earnedAt": null,
        "progress": 0
      },
      {
        "id": 9,
        "name": "Financial Discipline Master",
        "description": "Track expenses daily for 30 consecutive days",
        "category": "consistency",
        "icon": "üìù",
        "criteria": "30 consecutive days of expense tracking",
        "points": 750,
        "unlocked": false,
        "earnedAt": null,
        "progress": 0
      },
      {
        "id": 10,
        "name": "Wealth Builder Legend",
        "description": "Achieve a net worth growth of 50% from your starting point",
        "category": "milestones",
        "icon": "üëë",
        "criteria": "50% net worth growth",
        "points": 1000,
        "unlocked": false,
        "earnedAt": null,
        "progress": 0
      }
    ],
    "stats": {
      "totalAchievements": 10,
      "unlockedCount": 1,
      "totalPoints": 100,
      "completionPercentage": 10
    }
  }
}
```

================================================================================
## 2. POST /api/achievements/check - Check and Unlock New Achievements
================================================================================

### cURL Command:
```bash
curl -X POST http://localhost:2000/api/achievements/check \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -H "Content-Type: application/json"
```

### Expected Response (New Achievements Unlocked):
```json
{
  "success": true,
  "data": {
    "newAchievements": [
      {
        "id": 2,
        "name": "Savings Improver",
        "description": "Save more than your average of the past two months",
        "category": "savings",
        "icon": "üìà",
        "criteria": "Monthly savings > 2-month average",
        "points": 150,
        "earnedAt": "2024-01-20T14:25:00.000Z"
      },
      {
        "id": 3,
        "name": "Consistent Tracker",
        "description": "Add income or expense entries for 7 consecutive days",
        "category": "consistency",
        "icon": "üìä",
        "criteria": "7 consecutive days of entries",
        "points": 200,
        "earnedAt": "2024-01-20T14:25:00.000Z"
      }
    ],
    "totalAchievements": 3,
    "totalPoints": 450,
    "message": "Congratulations! You unlocked 2 new achievements!"
  }
}
```

### Expected Response (No New Achievements):
```json
{
  "success": true,
  "data": {
    "newAchievements": [],
    "totalAchievements": 3,
    "totalPoints": 450,
    "message": "No new achievements unlocked"
  }
}
```

================================================================================
## 3. GET /api/achievements/leaderboard - Get Achievement Leaderboard
================================================================================

### cURL Command (Default limit 10):
```bash
curl -X GET http://localhost:2000/api/achievements/leaderboard \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -H "Content-Type: application/json"
```

### cURL Command (Custom limit):
```bash
curl -X GET "http://localhost:2000/api/achievements/leaderboard?limit=5" \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -H "Content-Type: application/json"
```

### Expected Response:
```json
{
  "success": true,
  "data": {
    "leaderboard": [
      {
        "_id": "60f7b3b3b3b3b3b3b3b3b3b3",
        "name": "John Doe",
        "achievementCount": 7,
        "totalPoints": 2100,
        "lastAchievement": {
          "achievementId": 8,
          "name": "Goal Completionist",
          "description": "Successfully complete 5 financial goals",
          "category": "goals",
          "icon": "‚≠ê",
          "points": 600,
          "earnedAt": "2024-01-18T16:45:00.000Z"
        }
      },
      {
        "_id": "60f7b3b3b3b3b3b3b3b3b3b4",
        "name": "Jane Smith",
        "achievementCount": 5,
        "totalPoints": 1350,
        "lastAchievement": {
          "achievementId": 6,
          "name": "Emergency Fund Builder",
          "description": "Build an emergency fund worth 3 months of expenses",
          "category": "milestones",
          "icon": "üõ°Ô∏è",
          "points": 400,
          "earnedAt": "2024-01-17T11:20:00.000Z"
        }
      },
      {
        "_id": "60f7b3b3b3b3b3b3b3b3b3b5",
        "name": "Mike Johnson",
        "achievementCount": 4,
        "totalPoints": 1000,
        "lastAchievement": {
          "achievementId": 5,
          "name": "Goal Setter",
          "description": "Create and actively work on 3 different goals simultaneously",
          "category": "goals",
          "icon": "üéØ",
          "points": 300,
          "earnedAt": "2024-01-16T09:15:00.000Z"
        }
      }
    ],
    "totalUsers": 3
  }
}
```

================================================================================
## 4. GET /api/users/achievements - Get User's Unlocked Achievements Only
================================================================================

### cURL Command:
```bash
curl -X GET http://localhost:2000/api/users/achievements \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -H "Content-Type: application/json"
```

### Expected Response:
```json
{
  "success": true,
  "data": {
    "achievements": [
      {
        "achievementId": 1,
        "name": "First Goal Achiever",
        "description": "Complete your first financial goal within the deadline",
        "category": "goals",
        "icon": "üéØ",
        "points": 100,
        "earnedAt": "2024-01-15T10:30:00.000Z"
      },
      {
        "achievementId": 2,
        "name": "Savings Improver",
        "description": "Save more than your average of the past two months",
        "category": "savings",
        "icon": "üìà",
        "points": 150,
        "earnedAt": "2024-01-20T14:25:00.000Z"
      }
    ]
  }
}
```

================================================================================
## ERROR RESPONSES
================================================================================

### 401 Unauthorized (Missing or Invalid Token):
```json
{
  "success": false,
  "message": "Not authorized, no token"
}
```

### 404 Not Found (Route doesn't exist):
```json
{
  "success": false,
  "message": "Route not found"
}
```

### 500 Internal Server Error:
```json
{
  "success": false,
  "message": "Server error occurred",
  "details": "Error details (development only)"
}
```

================================================================================
## TESTING WORKFLOW
================================================================================

### Step 1: Authentication
1. Run login cURL to get JWT token
2. Copy the token from response
3. Replace YOUR_JWT_TOKEN in all commands below

### Step 2: Test All Achievements
```bash
# Get all achievements with progress
curl -X GET http://localhost:2000/api/achievements \
  -H "Authorization: Bearer YOUR_ACTUAL_TOKEN" \
  -H "Content-Type: application/json"
```

### Step 3: Check for New Achievements
```bash
# Manually trigger achievement check
curl -X POST http://localhost:2000/api/achievements/check \
  -H "Authorization: Bearer YOUR_ACTUAL_TOKEN" \
  -H "Content-Type: application/json"
```

### Step 4: View Leaderboard
```bash
# Get top 10 users by achievement points
curl -X GET http://localhost:2000/api/achievements/leaderboard \
  -H "Authorization: Bearer YOUR_ACTUAL_TOKEN" \
  -H "Content-Type: application/json"
```

### Step 5: Get User's Unlocked Only
```bash
# Get only achievements the user has earned
curl -X GET http://localhost:2000/api/users/achievements \
  -H "Authorization: Bearer YOUR_ACTUAL_TOKEN" \
  -H "Content-Type: application/json"
```

================================================================================
## ACHIEVEMENT CATEGORIES & POINTS
================================================================================

**Categories:**
- goals: Goal-related achievements (üéØ)
- savings: Savings and budget achievements (üìàüí∞üèÜ)
- consistency: Tracking consistency achievements (üìäüìù)
- milestones: Major financial milestones (üõ°Ô∏èüëë)

**Points System:**
- Level 1: 100 points
- Level 2: 150 points  
- Level 3: 200 points
- Level 4: 250 points
- Level 5: 300 points
- Level 6: 400 points
- Level 7: 500 points
- Level 8: 600 points
- Level 9: 750 points
- Level 10: 1000 points

**Total Possible Points: 4,150 points**

================================================================================
## FRONTEND INTEGRATION NOTES
================================================================================

### Key Data Fields for Frontend:
- `achievements[].id` - Unique achievement identifier
- `achievements[].name` - Achievement title
- `achievements[].description` - Achievement description
- `achievements[].category` - Category for filtering/styling
- `achievements[].icon` - Emoji icon for display
- `achievements[].points` - Points value
- `achievements[].unlocked` - Boolean unlock status
- `achievements[].earnedAt` - ISO timestamp when earned
- `achievements[].progress` - Progress percentage (0-100)

### Stats Object:
- `stats.totalAchievements` - Total number of achievements
- `stats.unlockedCount` - Number of unlocked achievements
- `stats.totalPoints` - Total points earned
- `stats.completionPercentage` - Overall completion percentage

================================================================================

## IMPLEMENTATION CHECKLIST FOR BACKEND:

‚ñ° Implement GET /api/achievements endpoint
‚ñ° Implement POST /api/achievements/check endpoint  
‚ñ° Implement GET /api/achievements/leaderboard endpoint
‚ñ° Implement GET /api/users/achievements endpoint
‚ñ° Add JWT authentication middleware
‚ñ° Add achievement calculation logic
‚ñ° Add database models for achievements
‚ñ° Test all endpoints with provided cURL commands
‚ñ° Verify response formats match expected structure

## FRONTEND INTEGRATION CHECKLIST:

‚ñ° Update API base URL to port 2000
‚ñ° Remove development bypass in useAchievements.js
‚ñ° Test with real backend responses
‚ñ° Verify data mapping between API and UI
‚ñ° Add error handling for authentication failures
‚ñ° Test achievement progress updates
‚ñ° Test achievement unlock notifications

================================================================================
